from google.api_core import retry as retries
from google.cloud.firestore_v1 import query as query_mod, transaction
from google.cloud.firestore_v1.base_collection import BaseCollectionReference
from google.cloud.firestore_v1.base_document import DocumentSnapshot as DocumentSnapshot
from google.cloud.firestore_v1.query_profile import ExplainOptions as ExplainOptions
from google.cloud.firestore_v1.query_results import QueryResultsList as QueryResultsList
from google.cloud.firestore_v1.stream_generator import StreamGenerator as StreamGenerator
from google.cloud.firestore_v1.watch import Watch
from typing import Any, Callable, Generator

class CollectionReference(BaseCollectionReference[query_mod.Query]):
    def __init__(self, *path, **kwargs) -> None: ...
    def add(self, document_data: dict, document_id: str | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> tuple[Any, Any]: ...
    def list_documents(self, page_size: int | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> Generator[Any, Any, None]: ...
    def get(self, transaction: transaction.Transaction | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> QueryResultsList[DocumentSnapshot]: ...
    def stream(self, transaction: transaction.Transaction | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> StreamGenerator[DocumentSnapshot]: ...
    def on_snapshot(self, callback: Callable) -> Watch: ...
