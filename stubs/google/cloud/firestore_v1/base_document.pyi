from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud.firestore_v1 import _helpers
from google.cloud.firestore_v1.types import Document as Document, firestore as firestore, write as write
from typing import Any, Awaitable, Iterable

class BaseDocumentReference:
    def __init__(self, *path, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self, unused_memo): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __ne__(self, other): ...
    @property
    def path(self): ...
    @property
    def id(self): ...
    @property
    def parent(self): ...
    def collection(self, collection_id: str): ...
    def create(self, document_data: dict, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None) -> write.WriteResult | Awaitable[write.WriteResult]: ...
    def set(self, document_data: dict, merge: bool = False, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None): ...
    def update(self, field_updates: dict, option: _helpers.WriteOption | None = None, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None): ...
    def delete(self, option: _helpers.WriteOption | None = None, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None): ...
    def get(self, field_paths: Iterable[str] | None = None, transaction: Incomplete | None = None, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None) -> DocumentSnapshot | Awaitable['DocumentSnapshot']: ...
    def collections(self, page_size: int | None = None, retry: retries.Retry | retries.AsyncRetry | None | object = None, timeout: float | None = None): ...
    def on_snapshot(self, callback) -> None: ...

class DocumentSnapshot:
    read_time: Incomplete
    create_time: Incomplete
    update_time: Incomplete
    def __init__(self, reference, data, exists, read_time, create_time, update_time) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @property
    def exists(self): ...
    @property
    def id(self): ...
    @property
    def reference(self): ...
    def get(self, field_path: str) -> Any: ...
    def to_dict(self) -> dict[str, Any] | None: ...
