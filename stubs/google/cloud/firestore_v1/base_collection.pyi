from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud.firestore_v1.base_aggregation import BaseAggregationQuery as BaseAggregationQuery
from google.cloud.firestore_v1.base_document import DocumentSnapshot as DocumentSnapshot
from google.cloud.firestore_v1.base_query import QueryType as QueryType
from google.cloud.firestore_v1.base_vector_query import BaseVectorQuery as BaseVectorQuery, DistanceMeasure as DistanceMeasure
from google.cloud.firestore_v1.document import DocumentReference as DocumentReference
from google.cloud.firestore_v1.field_path import FieldPath as FieldPath
from google.cloud.firestore_v1.query_profile import ExplainOptions as ExplainOptions
from google.cloud.firestore_v1.query_results import QueryResultsList as QueryResultsList
from google.cloud.firestore_v1.stream_generator import StreamGenerator as StreamGenerator
from google.cloud.firestore_v1.transaction import Transaction as Transaction
from google.cloud.firestore_v1.vector import Vector as Vector
from google.cloud.firestore_v1.vector_query import VectorQuery as VectorQuery
from typing import Any, AsyncGenerator, AsyncIterator, Coroutine, Generator, Generic, Iterable

class BaseCollectionReference(Generic[QueryType]):
    def __init__(self, *path, **kwargs) -> None: ...
    def __eq__(self, other): ...
    @property
    def id(self): ...
    @property
    def parent(self): ...
    def document(self, document_id: str | None = None): ...
    def add(self, document_data: dict, document_id: str | None = None, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None) -> tuple[Any, Any] | Coroutine[Any, Any, tuple[Any, Any]]: ...
    def list_documents(self, page_size: int | None = None, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None) -> Generator[DocumentReference, Any, Any] | AsyncGenerator[DocumentReference, Any]: ...
    def recursive(self) -> QueryType: ...
    def select(self, field_paths: Iterable[str]) -> QueryType: ...
    def where(self, field_path: str | None = None, op_string: str | None = None, value: Incomplete | None = None, *, filter: Incomplete | None = None) -> QueryType: ...
    def order_by(self, field_path: str, **kwargs) -> QueryType: ...
    def limit(self, count: int) -> QueryType: ...
    def limit_to_last(self, count: int): ...
    def offset(self, num_to_skip: int) -> QueryType: ...
    def start_at(self, document_fields: DocumentSnapshot | dict | list | tuple) -> QueryType: ...
    def start_after(self, document_fields: DocumentSnapshot | dict | list | tuple) -> QueryType: ...
    def end_before(self, document_fields: DocumentSnapshot | dict | list | tuple) -> QueryType: ...
    def end_at(self, document_fields: DocumentSnapshot | dict | list | tuple) -> QueryType: ...
    def get(self, transaction: Transaction | None = None, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> QueryResultsList[DocumentSnapshot] | Coroutine[Any, Any, QueryResultsList[DocumentSnapshot]]: ...
    def stream(self, transaction: Transaction | None = None, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> StreamGenerator[DocumentSnapshot] | AsyncIterator[DocumentSnapshot]: ...
    def on_snapshot(self, callback) -> None: ...
    def count(self, alias: Incomplete | None = None): ...
    def sum(self, field_ref: str | FieldPath, alias: Incomplete | None = None): ...
    def avg(self, field_ref: str | FieldPath, alias: Incomplete | None = None): ...
    def find_nearest(self, vector_field: str, query_vector: Vector, limit: int, distance_measure: DistanceMeasure, *, distance_result_field: str | None = None, distance_threshold: float | None = None) -> VectorQuery: ...
