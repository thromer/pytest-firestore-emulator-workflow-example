from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud.client import ClientWithProject
from google.cloud.firestore_v1 import _helpers
from google.cloud.firestore_v1.base_batch import BaseWriteBatch as BaseWriteBatch
from google.cloud.firestore_v1.base_collection import BaseCollectionReference as BaseCollectionReference
from google.cloud.firestore_v1.base_document import BaseDocumentReference as BaseDocumentReference, DocumentSnapshot
from google.cloud.firestore_v1.base_query import BaseQuery as BaseQuery
from google.cloud.firestore_v1.base_transaction import BaseTransaction as BaseTransaction
from google.cloud.firestore_v1.bulk_writer import BulkWriter, BulkWriterOptions as BulkWriterOptions
from typing import Any, AsyncGenerator, Awaitable, Generator, Iterable

DEFAULT_DATABASE: str

class BaseClient(ClientWithProject):
    SCOPE: Incomplete
    def __init__(self, project: Incomplete | None = None, credentials: Incomplete | None = None, database: Incomplete | None = None, client_info=..., client_options: Incomplete | None = None) -> None: ...
    def collection(self, *collection_path) -> BaseCollectionReference: ...
    def collection_group(self, collection_id: str) -> BaseQuery: ...
    def document(self, *document_path) -> BaseDocumentReference: ...
    def bulk_writer(self, options: BulkWriterOptions | None = None) -> BulkWriter: ...
    def recursive_delete(self, reference, *, bulk_writer: BulkWriter | None = None, chunk_size: int = 5000) -> int | Awaitable[int]: ...
    @staticmethod
    def field_path(*field_names: str) -> str: ...
    @staticmethod
    def write_option(**kwargs) -> _helpers.ExistsOption | _helpers.LastUpdateOption: ...
    def get_all(self, references: list, field_paths: Iterable[str] | None = None, transaction: Incomplete | None = None, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None) -> AsyncGenerator[DocumentSnapshot, Any] | Generator[DocumentSnapshot, Any, Any]: ...
    def collections(self, retry: retries.Retry | retries.AsyncRetry | object | None = None, timeout: float | None = None): ...
    def batch(self) -> BaseWriteBatch: ...
    def transaction(self, **kwargs) -> BaseTransaction: ...
