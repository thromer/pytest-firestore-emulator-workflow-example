from _typeshed import Incomplete
from enum import Enum
from typing import NamedTuple

TargetChangeType: Incomplete
WATCH_TARGET_ID: int
GRPC_STATUS_CODE: Incomplete

class DocTreeEntry(NamedTuple):
    value: Incomplete
    index: Incomplete

class WatchDocTree:
    def __init__(self) -> None: ...
    def keys(self): ...
    def insert(self, key, value): ...
    def find(self, key): ...
    def remove(self, key): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, k) -> bool: ...

class ChangeType(Enum):
    ADDED = 1
    REMOVED = 2
    MODIFIED = 3

class DocumentChange:
    type: Incomplete
    document: Incomplete
    old_index: Incomplete
    new_index: Incomplete
    def __init__(self, type, document, old_index, new_index) -> None: ...

class WatchResult:
    snapshot: Incomplete
    name: Incomplete
    change_type: Incomplete
    def __init__(self, snapshot, name, change_type) -> None: ...

def document_watch_comparator(doc1, doc2): ...

class Watch:
    resume_token: Incomplete
    doc_tree: Incomplete
    doc_map: Incomplete
    change_map: Incomplete
    current: bool
    has_pushed: bool
    def __init__(self, document_reference, firestore, target, comparator, snapshot_callback, document_snapshot_cls) -> None: ...
    @classmethod
    def for_document(cls, document_ref, snapshot_callback, document_snapshot_cls): ...
    @classmethod
    def for_query(cls, query, snapshot_callback, document_snapshot_cls): ...
    @property
    def is_active(self): ...
    def close(self, reason: Incomplete | None = None) -> None: ...
    def unsubscribe(self) -> None: ...
    def on_snapshot(self, proto) -> None: ...
    def push(self, read_time, next_resume_token) -> None: ...
