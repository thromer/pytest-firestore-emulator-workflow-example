import datetime
import google
from _typeshed import Incomplete
from google.api_core import retry as retries
from google.api_core.datetime_helpers import DatetimeWithNanoseconds
from google.cloud.firestore_v1 import DocumentSnapshot as DocumentSnapshot, types
from google.cloud.firestore_v1.field_path import FieldPath
from google.cloud.firestore_v1.vector import Vector
from google.protobuf.timestamp_pb2 import Timestamp
from google.type import latlng_pb2
from typing import Any, Generator

BAD_PATH_TEMPLATE: str
DOCUMENT_PATH_DELIMITER: str
INACTIVE_TXN: str
READ_AFTER_WRITE_ERROR: str
BAD_REFERENCE_ERROR: str
WRONG_APP_REFERENCE: str
REQUEST_TIME_ENUM: Incomplete

class GeoPoint:
    latitude: Incomplete
    longitude: Incomplete
    def __init__(self, latitude, longitude) -> None: ...
    def to_protobuf(self) -> latlng_pb2.LatLng: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def verify_path(path, is_collection) -> None: ...
def encode_value(value) -> types.document.Value: ...
def encode_dict(values_dict) -> dict: ...
def document_snapshot_to_protobuf(snapshot: DocumentSnapshot) -> google.cloud.firestore_v1.types.Document | None: ...

class DocumentReferenceValue:
    project_name: Incomplete
    collection_name: Incomplete
    database_name: Incomplete
    document_id: Incomplete
    def __init__(self, reference_value: str) -> None: ...
    @property
    def full_key(self) -> str: ...
    @property
    def full_path(self) -> str: ...

def reference_value_to_document(reference_value, client) -> Any: ...
def decode_value(value, client) -> None | bool | int | float | list | datetime.datetime | str | bytes | dict | GeoPoint | Vector: ...
def decode_dict(value_fields, client) -> dict | Vector: ...
def get_doc_id(document_pb, expected_prefix) -> str: ...
def extract_fields(document_data, prefix_path: FieldPath, expand_dots: bool = False) -> Generator[tuple[Any, Any], Any, None]: ...
def set_field_value(document_data, field_path, value) -> None: ...
def get_field_value(document_data, field_path) -> Any: ...

class DocumentExtractor:
    document_data: Incomplete
    field_paths: Incomplete
    deleted_fields: Incomplete
    server_timestamps: Incomplete
    array_removes: Incomplete
    array_unions: Incomplete
    increments: Incomplete
    minimums: Incomplete
    maximums: Incomplete
    set_fields: Incomplete
    empty_document: bool
    def __init__(self, document_data) -> None: ...
    @property
    def has_transforms(self): ...
    @property
    def transform_paths(self): ...
    def get_update_pb(self, document_path, exists: Incomplete | None = None, allow_empty_mask: bool = False) -> types.write.Write: ...
    def get_field_transform_pbs(self, document_path) -> list[types.write.DocumentTransform.FieldTransform]: ...
    def get_transform_pb(self, document_path, exists: Incomplete | None = None) -> types.write.Write: ...

def pbs_for_create(document_path, document_data) -> list[types.write.Write]: ...
def pbs_for_set_no_merge(document_path, document_data) -> list[types.write.Write]: ...

class DocumentExtractorForMerge(DocumentExtractor):
    data_merge: Incomplete
    transform_merge: Incomplete
    merge: Incomplete
    def __init__(self, document_data) -> None: ...
    def apply_merge(self, merge) -> None: ...

def pbs_for_set_with_merge(document_path, document_data, merge) -> list[types.write.Write]: ...

class DocumentExtractorForUpdate(DocumentExtractor):
    top_level_paths: Incomplete
    def __init__(self, document_data) -> None: ...

def pbs_for_update(document_path, field_updates, option) -> list[types.write.Write]: ...
def pb_for_delete(document_path, option) -> types.write.Write: ...

class ReadAfterWriteError(Exception): ...

def get_transaction_id(transaction, read_operation: bool = True) -> bytes | None: ...
def metadata_with_prefix(prefix: str, **kw) -> list[tuple[str, str]]: ...

class WriteOption:
    def modify_write(self, write, no_create_msg: Incomplete | None = None) -> None: ...

class LastUpdateOption(WriteOption):
    def __init__(self, last_update_time) -> None: ...
    def __eq__(self, other): ...
    def modify_write(self, write, *unused_args, **unused_kwargs) -> None: ...

class ExistsOption(WriteOption):
    def __init__(self, exists) -> None: ...
    def __eq__(self, other): ...
    def modify_write(self, write, *unused_args, **unused_kwargs) -> None: ...

def make_retry_timeout_kwargs(retry: retries.Retry | retries.AsyncRetry | object | None, timeout: float | None) -> dict: ...
def build_timestamp(dt: DatetimeWithNanoseconds | datetime.datetime | None = None) -> Timestamp: ...
def compare_timestamps(ts1: Timestamp | datetime.datetime, ts2: Timestamp | datetime.datetime) -> int: ...
def deserialize_bundle(serialized: str | bytes, client: google.cloud.firestore_v1.client.BaseClient) -> google.cloud.firestore_bundle.FirestoreBundle: ...
