import abc
from _typeshed import Incomplete
from google.api_core import gapic_v1
from google.auth import credentials as ga_credentials
from google.cloud.firestore_v1.types import document, document as gf_document, firestore
from google.longrunning import operations_pb2
from google.protobuf import empty_pb2
from typing import Awaitable, Callable, Sequence

__all__ = ['FirestoreTransport']

class FirestoreTransport(abc.ABC):
    AUTH_SCOPES: Incomplete
    DEFAULT_HOST: str
    def __init__(self, *, host: str = ..., credentials: ga_credentials.Credentials | None = None, credentials_file: str | None = None, scopes: Sequence[str] | None = None, quota_project_id: str | None = None, client_info: gapic_v1.client_info.ClientInfo = ..., always_use_jwt_access: bool | None = False, api_audience: str | None = None, **kwargs) -> None: ...
    @property
    def host(self): ...
    def close(self) -> None: ...
    @property
    def get_document(self) -> Callable[[firestore.GetDocumentRequest], document.Document | Awaitable[document.Document]]: ...
    @property
    def list_documents(self) -> Callable[[firestore.ListDocumentsRequest], firestore.ListDocumentsResponse | Awaitable[firestore.ListDocumentsResponse]]: ...
    @property
    def update_document(self) -> Callable[[firestore.UpdateDocumentRequest], gf_document.Document | Awaitable[gf_document.Document]]: ...
    @property
    def delete_document(self) -> Callable[[firestore.DeleteDocumentRequest], empty_pb2.Empty | Awaitable[empty_pb2.Empty]]: ...
    @property
    def batch_get_documents(self) -> Callable[[firestore.BatchGetDocumentsRequest], firestore.BatchGetDocumentsResponse | Awaitable[firestore.BatchGetDocumentsResponse]]: ...
    @property
    def begin_transaction(self) -> Callable[[firestore.BeginTransactionRequest], firestore.BeginTransactionResponse | Awaitable[firestore.BeginTransactionResponse]]: ...
    @property
    def commit(self) -> Callable[[firestore.CommitRequest], firestore.CommitResponse | Awaitable[firestore.CommitResponse]]: ...
    @property
    def rollback(self) -> Callable[[firestore.RollbackRequest], empty_pb2.Empty | Awaitable[empty_pb2.Empty]]: ...
    @property
    def run_query(self) -> Callable[[firestore.RunQueryRequest], firestore.RunQueryResponse | Awaitable[firestore.RunQueryResponse]]: ...
    @property
    def run_aggregation_query(self) -> Callable[[firestore.RunAggregationQueryRequest], firestore.RunAggregationQueryResponse | Awaitable[firestore.RunAggregationQueryResponse]]: ...
    @property
    def partition_query(self) -> Callable[[firestore.PartitionQueryRequest], firestore.PartitionQueryResponse | Awaitable[firestore.PartitionQueryResponse]]: ...
    @property
    def write(self) -> Callable[[firestore.WriteRequest], firestore.WriteResponse | Awaitable[firestore.WriteResponse]]: ...
    @property
    def listen(self) -> Callable[[firestore.ListenRequest], firestore.ListenResponse | Awaitable[firestore.ListenResponse]]: ...
    @property
    def list_collection_ids(self) -> Callable[[firestore.ListCollectionIdsRequest], firestore.ListCollectionIdsResponse | Awaitable[firestore.ListCollectionIdsResponse]]: ...
    @property
    def batch_write(self) -> Callable[[firestore.BatchWriteRequest], firestore.BatchWriteResponse | Awaitable[firestore.BatchWriteResponse]]: ...
    @property
    def create_document(self) -> Callable[[firestore.CreateDocumentRequest], document.Document | Awaitable[document.Document]]: ...
    @property
    def list_operations(self) -> Callable[[operations_pb2.ListOperationsRequest], operations_pb2.ListOperationsResponse | Awaitable[operations_pb2.ListOperationsResponse]]: ...
    @property
    def get_operation(self) -> Callable[[operations_pb2.GetOperationRequest], operations_pb2.Operation | Awaitable[operations_pb2.Operation]]: ...
    @property
    def cancel_operation(self) -> Callable[[operations_pb2.CancelOperationRequest], None]: ...
    @property
    def delete_operation(self) -> Callable[[operations_pb2.DeleteOperationRequest], None]: ...
    @property
    def kind(self) -> str: ...
