import dataclasses
from .base import FirestoreTransport
from google.api_core import gapic_v1, rest_streaming
from google.auth import credentials as ga_credentials
from google.cloud.firestore_v1.types import document, document as gf_document, firestore
from google.longrunning import operations_pb2
from google.protobuf import empty_pb2
from typing import Callable, Sequence

__all__ = ['FirestoreRestTransport']

class FirestoreRestInterceptor:
    def pre_batch_get_documents(self, request: firestore.BatchGetDocumentsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.BatchGetDocumentsRequest, Sequence[tuple[str, str]]]: ...
    def post_batch_get_documents(self, response: rest_streaming.ResponseIterator) -> rest_streaming.ResponseIterator: ...
    def pre_batch_write(self, request: firestore.BatchWriteRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.BatchWriteRequest, Sequence[tuple[str, str]]]: ...
    def post_batch_write(self, response: firestore.BatchWriteResponse) -> firestore.BatchWriteResponse: ...
    def pre_begin_transaction(self, request: firestore.BeginTransactionRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.BeginTransactionRequest, Sequence[tuple[str, str]]]: ...
    def post_begin_transaction(self, response: firestore.BeginTransactionResponse) -> firestore.BeginTransactionResponse: ...
    def pre_commit(self, request: firestore.CommitRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.CommitRequest, Sequence[tuple[str, str]]]: ...
    def post_commit(self, response: firestore.CommitResponse) -> firestore.CommitResponse: ...
    def pre_create_document(self, request: firestore.CreateDocumentRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.CreateDocumentRequest, Sequence[tuple[str, str]]]: ...
    def post_create_document(self, response: document.Document) -> document.Document: ...
    def pre_delete_document(self, request: firestore.DeleteDocumentRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.DeleteDocumentRequest, Sequence[tuple[str, str]]]: ...
    def pre_get_document(self, request: firestore.GetDocumentRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.GetDocumentRequest, Sequence[tuple[str, str]]]: ...
    def post_get_document(self, response: document.Document) -> document.Document: ...
    def pre_list_collection_ids(self, request: firestore.ListCollectionIdsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.ListCollectionIdsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_collection_ids(self, response: firestore.ListCollectionIdsResponse) -> firestore.ListCollectionIdsResponse: ...
    def pre_list_documents(self, request: firestore.ListDocumentsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.ListDocumentsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_documents(self, response: firestore.ListDocumentsResponse) -> firestore.ListDocumentsResponse: ...
    def pre_partition_query(self, request: firestore.PartitionQueryRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.PartitionQueryRequest, Sequence[tuple[str, str]]]: ...
    def post_partition_query(self, response: firestore.PartitionQueryResponse) -> firestore.PartitionQueryResponse: ...
    def pre_rollback(self, request: firestore.RollbackRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.RollbackRequest, Sequence[tuple[str, str]]]: ...
    def pre_run_aggregation_query(self, request: firestore.RunAggregationQueryRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.RunAggregationQueryRequest, Sequence[tuple[str, str]]]: ...
    def post_run_aggregation_query(self, response: rest_streaming.ResponseIterator) -> rest_streaming.ResponseIterator: ...
    def pre_run_query(self, request: firestore.RunQueryRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.RunQueryRequest, Sequence[tuple[str, str]]]: ...
    def post_run_query(self, response: rest_streaming.ResponseIterator) -> rest_streaming.ResponseIterator: ...
    def pre_update_document(self, request: firestore.UpdateDocumentRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore.UpdateDocumentRequest, Sequence[tuple[str, str]]]: ...
    def post_update_document(self, response: gf_document.Document) -> gf_document.Document: ...
    def pre_cancel_operation(self, request: operations_pb2.CancelOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.CancelOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_cancel_operation(self, response: None) -> None: ...
    def pre_delete_operation(self, request: operations_pb2.DeleteOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.DeleteOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_delete_operation(self, response: None) -> None: ...
    def pre_get_operation(self, request: operations_pb2.GetOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.GetOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_get_operation(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_list_operations(self, request: operations_pb2.ListOperationsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.ListOperationsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_operations(self, response: operations_pb2.ListOperationsResponse) -> operations_pb2.ListOperationsResponse: ...

@dataclasses.dataclass
class FirestoreRestStub:
    def __init__(self, _session, _host, _interceptor) -> None: ...

class FirestoreRestTransport(FirestoreTransport):
    def __init__(self, *, host: str = 'firestore.googleapis.com', credentials: ga_credentials.Credentials | None = None, credentials_file: str | None = None, scopes: Sequence[str] | None = None, client_cert_source_for_mtls: Callable[[], tuple[bytes, bytes]] | None = None, quota_project_id: str | None = None, client_info: gapic_v1.client_info.ClientInfo = ..., always_use_jwt_access: bool | None = False, url_scheme: str = 'https', interceptor: FirestoreRestInterceptor | None = None, api_audience: str | None = None) -> None: ...
    class _BatchGetDocuments(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.BatchGetDocumentsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> rest_streaming.ResponseIterator: ...
    class _BatchWrite(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.BatchWriteRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.BatchWriteResponse: ...
    class _BeginTransaction(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.BeginTransactionRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.BeginTransactionResponse: ...
    class _Commit(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.CommitRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.CommitResponse: ...
    class _CreateDocument(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.CreateDocumentRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> document.Document: ...
    class _DeleteDocument(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.DeleteDocumentRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()): ...
    class _GetDocument(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.GetDocumentRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> document.Document: ...
    class _ListCollectionIds(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.ListCollectionIdsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.ListCollectionIdsResponse: ...
    class _ListDocuments(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.ListDocumentsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.ListDocumentsResponse: ...
    class _Listen(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.ListenRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> rest_streaming.ResponseIterator: ...
    class _PartitionQuery(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.PartitionQueryRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore.PartitionQueryResponse: ...
    class _Rollback(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.RollbackRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()): ...
    class _RunAggregationQuery(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.RunAggregationQueryRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> rest_streaming.ResponseIterator: ...
    class _RunQuery(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.RunQueryRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> rest_streaming.ResponseIterator: ...
    class _UpdateDocument(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.UpdateDocumentRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> gf_document.Document: ...
    class _Write(FirestoreRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore.WriteRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> rest_streaming.ResponseIterator: ...
    @property
    def batch_get_documents(self) -> Callable[[firestore.BatchGetDocumentsRequest], firestore.BatchGetDocumentsResponse]: ...
    @property
    def batch_write(self) -> Callable[[firestore.BatchWriteRequest], firestore.BatchWriteResponse]: ...
    @property
    def begin_transaction(self) -> Callable[[firestore.BeginTransactionRequest], firestore.BeginTransactionResponse]: ...
    @property
    def commit(self) -> Callable[[firestore.CommitRequest], firestore.CommitResponse]: ...
    @property
    def create_document(self) -> Callable[[firestore.CreateDocumentRequest], document.Document]: ...
    @property
    def delete_document(self) -> Callable[[firestore.DeleteDocumentRequest], empty_pb2.Empty]: ...
    @property
    def get_document(self) -> Callable[[firestore.GetDocumentRequest], document.Document]: ...
    @property
    def list_collection_ids(self) -> Callable[[firestore.ListCollectionIdsRequest], firestore.ListCollectionIdsResponse]: ...
    @property
    def list_documents(self) -> Callable[[firestore.ListDocumentsRequest], firestore.ListDocumentsResponse]: ...
    @property
    def listen(self) -> Callable[[firestore.ListenRequest], firestore.ListenResponse]: ...
    @property
    def partition_query(self) -> Callable[[firestore.PartitionQueryRequest], firestore.PartitionQueryResponse]: ...
    @property
    def rollback(self) -> Callable[[firestore.RollbackRequest], empty_pb2.Empty]: ...
    @property
    def run_aggregation_query(self) -> Callable[[firestore.RunAggregationQueryRequest], firestore.RunAggregationQueryResponse]: ...
    @property
    def run_query(self) -> Callable[[firestore.RunQueryRequest], firestore.RunQueryResponse]: ...
    @property
    def update_document(self) -> Callable[[firestore.UpdateDocumentRequest], gf_document.Document]: ...
    @property
    def write(self) -> Callable[[firestore.WriteRequest], firestore.WriteResponse]: ...
    @property
    def cancel_operation(self): ...
    class _CancelOperation(FirestoreRestStub):
        def __call__(self, request: operations_pb2.CancelOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    @property
    def delete_operation(self): ...
    class _DeleteOperation(FirestoreRestStub):
        def __call__(self, request: operations_pb2.DeleteOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    @property
    def get_operation(self): ...
    class _GetOperation(FirestoreRestStub):
        def __call__(self, request: operations_pb2.GetOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    @property
    def list_operations(self): ...
    class _ListOperations(FirestoreRestStub):
        def __call__(self, request: operations_pb2.ListOperationsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.ListOperationsResponse: ...
    @property
    def kind(self) -> str: ...
    def close(self) -> None: ...
