from .transports.base import FirestoreTransport
from _typeshed import Incomplete
from google.api_core import client_options as client_options_lib, gapic_v1
from google.auth import credentials as ga_credentials
from google.cloud.firestore_v1.services.firestore import pagers
from google.cloud.firestore_v1.types import common, document, document as gf_document, firestore, write as gf_write
from google.longrunning import operations_pb2
from typing import Callable, Iterable, Iterator, MutableSequence, Sequence

__all__ = ['FirestoreClient']

class FirestoreClientMeta(type):
    def get_transport_class(cls, label: str | None = None) -> type[FirestoreTransport]: ...

class FirestoreClient(metaclass=FirestoreClientMeta):
    DEFAULT_ENDPOINT: str
    DEFAULT_MTLS_ENDPOINT: Incomplete
    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs): ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs): ...
    from_service_account_json = from_service_account_file
    @property
    def transport(self) -> FirestoreTransport: ...
    @staticmethod
    def common_billing_account_path(billing_account: str) -> str: ...
    @staticmethod
    def parse_common_billing_account_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_folder_path(folder: str) -> str: ...
    @staticmethod
    def parse_common_folder_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_organization_path(organization: str) -> str: ...
    @staticmethod
    def parse_common_organization_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_project_path(project: str) -> str: ...
    @staticmethod
    def parse_common_project_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_location_path(project: str, location: str) -> str: ...
    @staticmethod
    def parse_common_location_path(path: str) -> dict[str, str]: ...
    @classmethod
    def get_mtls_endpoint_and_cert_source(cls, client_options: client_options_lib.ClientOptions | None = None): ...
    @property
    def api_endpoint(self): ...
    @property
    def universe_domain(self) -> str: ...
    def __init__(self, *, credentials: ga_credentials.Credentials | None = None, transport: str | FirestoreTransport | Callable[..., FirestoreTransport] | None = None, client_options: client_options_lib.ClientOptions | dict | None = None, client_info: gapic_v1.client_info.ClientInfo = ...) -> None: ...
    def get_document(self, request: firestore.GetDocumentRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> document.Document: ...
    def list_documents(self, request: firestore.ListDocumentsRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListDocumentsPager: ...
    def update_document(self, request: firestore.UpdateDocumentRequest | dict | None = None, *, document: gf_document.Document | None = None, update_mask: common.DocumentMask | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gf_document.Document: ...
    def delete_document(self, request: firestore.DeleteDocumentRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def batch_get_documents(self, request: firestore.BatchGetDocumentsRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> Iterable[firestore.BatchGetDocumentsResponse]: ...
    def begin_transaction(self, request: firestore.BeginTransactionRequest | dict | None = None, *, database: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore.BeginTransactionResponse: ...
    def commit(self, request: firestore.CommitRequest | dict | None = None, *, database: str | None = None, writes: MutableSequence[gf_write.Write] | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore.CommitResponse: ...
    def rollback(self, request: firestore.RollbackRequest | dict | None = None, *, database: str | None = None, transaction: bytes | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def run_query(self, request: firestore.RunQueryRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> Iterable[firestore.RunQueryResponse]: ...
    def run_aggregation_query(self, request: firestore.RunAggregationQueryRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> Iterable[firestore.RunAggregationQueryResponse]: ...
    def partition_query(self, request: firestore.PartitionQueryRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.PartitionQueryPager: ...
    def write(self, requests: Iterator[firestore.WriteRequest] | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> Iterable[firestore.WriteResponse]: ...
    def listen(self, requests: Iterator[firestore.ListenRequest] | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> Iterable[firestore.ListenResponse]: ...
    def list_collection_ids(self, request: firestore.ListCollectionIdsRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListCollectionIdsPager: ...
    def batch_write(self, request: firestore.BatchWriteRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore.BatchWriteResponse: ...
    def create_document(self, request: firestore.CreateDocumentRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> document.Document: ...
    def __enter__(self) -> FirestoreClient: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def list_operations(self, request: operations_pb2.ListOperationsRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.ListOperationsResponse: ...
    def get_operation(self, request: operations_pb2.GetOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    def delete_operation(self, request: operations_pb2.DeleteOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def cancel_operation(self, request: operations_pb2.CancelOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
