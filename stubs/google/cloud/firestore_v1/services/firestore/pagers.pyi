from _typeshed import Incomplete
from google.cloud.firestore_v1.types import document as document, firestore, query as query
from typing import Any, AsyncIterator, Awaitable, Callable, Iterator, Sequence

OptionalRetry: Incomplete
OptionalAsyncRetry: Incomplete

class ListDocumentsPager:
    def __init__(self, method: Callable[..., firestore.ListDocumentsResponse], request: firestore.ListDocumentsRequest, response: firestore.ListDocumentsResponse, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    def pages(self) -> Iterator[firestore.ListDocumentsResponse]: ...
    def __iter__(self) -> Iterator[document.Document]: ...

class ListDocumentsAsyncPager:
    def __init__(self, method: Callable[..., Awaitable[firestore.ListDocumentsResponse]], request: firestore.ListDocumentsRequest, response: firestore.ListDocumentsResponse, *, retry: OptionalAsyncRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    async def pages(self) -> AsyncIterator[firestore.ListDocumentsResponse]: ...
    def __aiter__(self) -> AsyncIterator[document.Document]: ...

class PartitionQueryPager:
    def __init__(self, method: Callable[..., firestore.PartitionQueryResponse], request: firestore.PartitionQueryRequest, response: firestore.PartitionQueryResponse, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    def pages(self) -> Iterator[firestore.PartitionQueryResponse]: ...
    def __iter__(self) -> Iterator[query.Cursor]: ...

class PartitionQueryAsyncPager:
    def __init__(self, method: Callable[..., Awaitable[firestore.PartitionQueryResponse]], request: firestore.PartitionQueryRequest, response: firestore.PartitionQueryResponse, *, retry: OptionalAsyncRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    async def pages(self) -> AsyncIterator[firestore.PartitionQueryResponse]: ...
    def __aiter__(self) -> AsyncIterator[query.Cursor]: ...

class ListCollectionIdsPager:
    def __init__(self, method: Callable[..., firestore.ListCollectionIdsResponse], request: firestore.ListCollectionIdsRequest, response: firestore.ListCollectionIdsResponse, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    def pages(self) -> Iterator[firestore.ListCollectionIdsResponse]: ...
    def __iter__(self) -> Iterator[str]: ...

class ListCollectionIdsAsyncPager:
    def __init__(self, method: Callable[..., Awaitable[firestore.ListCollectionIdsResponse]], request: firestore.ListCollectionIdsRequest, response: firestore.ListCollectionIdsResponse, *, retry: OptionalAsyncRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    async def pages(self) -> AsyncIterator[firestore.ListCollectionIdsResponse]: ...
    def __aiter__(self) -> AsyncIterator[str]: ...
