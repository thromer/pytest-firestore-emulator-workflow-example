import abc
from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud import firestore_v1 as firestore_v1
from google.cloud.firestore_v1 import document
from google.cloud.firestore_v1.async_stream_generator import AsyncStreamGenerator as AsyncStreamGenerator
from google.cloud.firestore_v1.base_document import DocumentSnapshot as DocumentSnapshot
from google.cloud.firestore_v1.base_vector_query import DistanceMeasure as DistanceMeasure
from google.cloud.firestore_v1.field_path import FieldPath as FieldPath
from google.cloud.firestore_v1.query_profile import ExplainOptions as ExplainOptions
from google.cloud.firestore_v1.query_results import QueryResultsList as QueryResultsList
from google.cloud.firestore_v1.stream_generator import StreamGenerator as StreamGenerator
from google.cloud.firestore_v1.types import Cursor as Cursor, RunQueryResponse as RunQueryResponse
from google.cloud.firestore_v1.vector import Vector as Vector
from typing import Any, Coroutine, Iterable, TypeVar

QueryType = TypeVar('QueryType', bound='BaseQuery')

class BaseFilter(abc.ABC, metaclass=abc.ABCMeta): ...

class FieldFilter(BaseFilter):
    field_path: Incomplete
    value: Incomplete
    op_string: Incomplete
    def __init__(self, field_path, op_string, value: Incomplete | None = None) -> None: ...

class BaseCompositeFilter(BaseFilter):
    operator: Incomplete
    filters: Incomplete
    def __init__(self, operator=..., filters: Incomplete | None = None) -> None: ...

class Or(BaseCompositeFilter):
    def __init__(self, filters) -> None: ...

class And(BaseCompositeFilter):
    def __init__(self, filters) -> None: ...

class BaseQuery:
    ASCENDING: str
    DESCENDING: str
    def __init__(self, parent, projection: Incomplete | None = None, field_filters=(), orders=(), limit: Incomplete | None = None, limit_to_last: bool = False, offset: Incomplete | None = None, start_at: Incomplete | None = None, end_at: Incomplete | None = None, all_descendants: bool = False, recursive: bool = False) -> None: ...
    def __eq__(self, other): ...
    def select(self, field_paths: Iterable[str]) -> QueryType: ...
    def where(self, field_path: str | None = None, op_string: str | None = None, value: Incomplete | None = None, *, filter: Incomplete | None = None) -> QueryType: ...
    def order_by(self, field_path: str, direction: str = ...) -> QueryType: ...
    def limit(self, count: int) -> QueryType: ...
    def limit_to_last(self, count: int) -> QueryType: ...
    def offset(self, num_to_skip: int) -> QueryType: ...
    def start_at(self, document_fields_or_snapshot: DocumentSnapshot | dict | list | tuple | None) -> QueryType: ...
    def start_after(self, document_fields_or_snapshot: DocumentSnapshot | dict | list | tuple | None) -> QueryType: ...
    def end_before(self, document_fields_or_snapshot: DocumentSnapshot | dict | list | tuple | None) -> QueryType: ...
    def end_at(self, document_fields_or_snapshot: DocumentSnapshot | dict | list | tuple | None) -> QueryType: ...
    def find_nearest(self, vector_field: str, query_vector: Vector, limit: int, distance_measure: DistanceMeasure, *, distance_result_field: str | None = None, distance_threshold: float | None = None): ...
    def count(self, alias: str | None = None) -> type['firestore_v1.base_aggregation.BaseAggregationQuery']: ...
    def sum(self, field_ref: str | FieldPath, alias: str | None = None) -> type['firestore_v1.base_aggregation.BaseAggregationQuery']: ...
    def avg(self, field_ref: str | FieldPath, alias: str | None = None) -> type['firestore_v1.base_aggregation.BaseAggregationQuery']: ...
    def get(self, transaction: Incomplete | None = None, retry: retries.Retry | None = None, timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> QueryResultsList[DocumentSnapshot] | Coroutine[Any, Any, QueryResultsList[DocumentSnapshot]]: ...
    def stream(self, transaction: Incomplete | None = None, retry: retries.Retry | None = None, timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> StreamGenerator[document.DocumentSnapshot] | AsyncStreamGenerator[DocumentSnapshot]: ...
    def on_snapshot(self, callback) -> None: ...
    def recursive(self) -> QueryType: ...

class BaseCollectionGroup(BaseQuery):
    def __init__(self, parent, projection: Incomplete | None = None, field_filters=(), orders=(), limit: Incomplete | None = None, limit_to_last: bool = False, offset: Incomplete | None = None, start_at: Incomplete | None = None, end_at: Incomplete | None = None, all_descendants: bool = True, recursive: bool = False) -> None: ...
    def get_partitions(self, partition_count, retry: retries.Retry | None = None, timeout: float | None = None): ...

class QueryPartition:
    def __init__(self, query, start_at, end_at) -> None: ...
    @property
    def start_at(self): ...
    @property
    def end_at(self): ...
    def query(self): ...
