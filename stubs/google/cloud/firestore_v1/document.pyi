from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud.firestore_v1 import _helpers
from google.cloud.firestore_v1.base_document import BaseDocumentReference, DocumentSnapshot
from google.cloud.firestore_v1.types import write as write
from google.cloud.firestore_v1.watch import Watch
from google.protobuf.timestamp_pb2 import Timestamp as Timestamp
from typing import Any, Callable, Generator, Iterable

logger: Incomplete

class DocumentReference(BaseDocumentReference):
    def __init__(self, *path, **kwargs) -> None: ...
    def create(self, document_data: dict, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> write.WriteResult: ...
    def set(self, document_data: dict, merge: bool = False, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> write.WriteResult: ...
    def update(self, field_updates: dict, option: _helpers.WriteOption | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> write.WriteResult: ...
    def delete(self, option: _helpers.WriteOption | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> Timestamp: ...
    def get(self, field_paths: Iterable[str] | None = None, transaction: Incomplete | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> DocumentSnapshot: ...
    def collections(self, page_size: int | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> Generator[Any, Any, None]: ...
    def on_snapshot(self, callback: Callable) -> Watch: ...
