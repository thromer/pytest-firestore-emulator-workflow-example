from _typeshed import Incomplete
from google.api_core import retry as retries
from google.cloud.firestore_v1.base_client import BaseClient
from google.cloud.firestore_v1.base_document import DocumentSnapshot as DocumentSnapshot
from google.cloud.firestore_v1.batch import WriteBatch
from google.cloud.firestore_v1.bulk_writer import BulkWriter as BulkWriter
from google.cloud.firestore_v1.collection import CollectionReference
from google.cloud.firestore_v1.document import DocumentReference
from google.cloud.firestore_v1.query import CollectionGroup
from google.cloud.firestore_v1.transaction import Transaction
from typing import Any, Generator, Iterable

class Client(BaseClient):
    def __init__(self, project: Incomplete | None = None, credentials: Incomplete | None = None, database: Incomplete | None = None, client_info=..., client_options: Incomplete | None = None) -> None: ...
    def collection(self, *collection_path: str) -> CollectionReference: ...
    def collection_group(self, collection_id: str) -> CollectionGroup: ...
    def document(self, *document_path: str) -> DocumentReference: ...
    def get_all(self, references: list, field_paths: Iterable[str] | None = None, transaction: Transaction | None = None, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> Generator[DocumentSnapshot, Any, None]: ...
    def collections(self, retry: retries.Retry | object | None = ..., timeout: float | None = None) -> Generator[Any, Any, None]: ...
    def recursive_delete(self, reference: CollectionReference | DocumentReference, *, bulk_writer: BulkWriter | None = None, chunk_size: int = 5000) -> int: ...
    def batch(self) -> WriteBatch: ...
    def transaction(self, **kwargs) -> Transaction: ...
