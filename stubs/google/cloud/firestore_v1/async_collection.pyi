from google.api_core import retry_async as retries
from google.cloud.firestore_v1 import async_document as async_document, async_query, transaction
from google.cloud.firestore_v1.async_stream_generator import AsyncStreamGenerator as AsyncStreamGenerator
from google.cloud.firestore_v1.base_collection import BaseCollectionReference
from google.cloud.firestore_v1.base_document import DocumentSnapshot as DocumentSnapshot
from google.cloud.firestore_v1.document import DocumentReference as DocumentReference
from google.cloud.firestore_v1.query_profile import ExplainOptions as ExplainOptions
from google.cloud.firestore_v1.query_results import QueryResultsList as QueryResultsList
from typing import Any, AsyncGenerator

class AsyncCollectionReference(BaseCollectionReference[async_query.AsyncQuery]):
    def __init__(self, *path, **kwargs) -> None: ...
    async def add(self, document_data: dict, document_id: str | None = None, retry: retries.AsyncRetry | object | None = ..., timeout: float | None = None) -> tuple[Any, Any]: ...
    def document(self, document_id: str | None = None) -> async_document.AsyncDocumentReference: ...
    async def list_documents(self, page_size: int | None = None, retry: retries.AsyncRetry | object | None = ..., timeout: float | None = None) -> AsyncGenerator[DocumentReference, None]: ...
    async def get(self, transaction: transaction.Transaction | None = None, retry: retries.AsyncRetry | object | None = ..., timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> QueryResultsList[DocumentSnapshot]: ...
    def stream(self, transaction: transaction.Transaction | None = None, retry: retries.AsyncRetry | object | None = ..., timeout: float | None = None, *, explain_options: ExplainOptions | None = None) -> AsyncStreamGenerator[DocumentSnapshot]: ...
