from _typeshed import Incomplete
from google.cloud.firestore_admin_v1.types import field as field, firestore_admin, index as index
from typing import Any, AsyncIterator, Awaitable, Callable, Iterator, Sequence

OptionalRetry: Incomplete
OptionalAsyncRetry: Incomplete

class ListIndexesPager:
    def __init__(self, method: Callable[..., firestore_admin.ListIndexesResponse], request: firestore_admin.ListIndexesRequest, response: firestore_admin.ListIndexesResponse, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    def pages(self) -> Iterator[firestore_admin.ListIndexesResponse]: ...
    def __iter__(self) -> Iterator[index.Index]: ...

class ListIndexesAsyncPager:
    def __init__(self, method: Callable[..., Awaitable[firestore_admin.ListIndexesResponse]], request: firestore_admin.ListIndexesRequest, response: firestore_admin.ListIndexesResponse, *, retry: OptionalAsyncRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    async def pages(self) -> AsyncIterator[firestore_admin.ListIndexesResponse]: ...
    def __aiter__(self) -> AsyncIterator[index.Index]: ...

class ListFieldsPager:
    def __init__(self, method: Callable[..., firestore_admin.ListFieldsResponse], request: firestore_admin.ListFieldsRequest, response: firestore_admin.ListFieldsResponse, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    def pages(self) -> Iterator[firestore_admin.ListFieldsResponse]: ...
    def __iter__(self) -> Iterator[field.Field]: ...

class ListFieldsAsyncPager:
    def __init__(self, method: Callable[..., Awaitable[firestore_admin.ListFieldsResponse]], request: firestore_admin.ListFieldsRequest, response: firestore_admin.ListFieldsResponse, *, retry: OptionalAsyncRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    @property
    async def pages(self) -> AsyncIterator[firestore_admin.ListFieldsResponse]: ...
    def __aiter__(self) -> AsyncIterator[field.Field]: ...
