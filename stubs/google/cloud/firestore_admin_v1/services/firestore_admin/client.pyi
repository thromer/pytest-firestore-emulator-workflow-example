from .transports.base import FirestoreAdminTransport
from _typeshed import Incomplete
from google.api_core import client_options as client_options_lib, gapic_v1, operation as gac_operation
from google.auth import credentials as ga_credentials
from google.cloud.firestore_admin_v1.services.firestore_admin import pagers
from google.cloud.firestore_admin_v1.types import backup, database, database as gfa_database, field, field as gfa_field, firestore_admin, index, index as gfa_index, schedule
from google.longrunning import operations_pb2
from google.protobuf import field_mask_pb2
from typing import Callable, Sequence

__all__ = ['FirestoreAdminClient']

class FirestoreAdminClientMeta(type):
    def get_transport_class(cls, label: str | None = None) -> type[FirestoreAdminTransport]: ...

class FirestoreAdminClient(metaclass=FirestoreAdminClientMeta):
    DEFAULT_ENDPOINT: str
    DEFAULT_MTLS_ENDPOINT: Incomplete
    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs): ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs): ...
    from_service_account_json = from_service_account_file
    @property
    def transport(self) -> FirestoreAdminTransport: ...
    @staticmethod
    def backup_path(project: str, location: str, backup: str) -> str: ...
    @staticmethod
    def parse_backup_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def backup_schedule_path(project: str, database: str, backup_schedule: str) -> str: ...
    @staticmethod
    def parse_backup_schedule_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def collection_group_path(project: str, database: str, collection: str) -> str: ...
    @staticmethod
    def parse_collection_group_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def database_path(project: str, database: str) -> str: ...
    @staticmethod
    def parse_database_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def field_path(project: str, database: str, collection: str, field: str) -> str: ...
    @staticmethod
    def parse_field_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def index_path(project: str, database: str, collection: str, index: str) -> str: ...
    @staticmethod
    def parse_index_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def location_path(project: str, location: str) -> str: ...
    @staticmethod
    def parse_location_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def operation_path(project: str, database: str, operation: str) -> str: ...
    @staticmethod
    def parse_operation_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_billing_account_path(billing_account: str) -> str: ...
    @staticmethod
    def parse_common_billing_account_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_folder_path(folder: str) -> str: ...
    @staticmethod
    def parse_common_folder_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_organization_path(organization: str) -> str: ...
    @staticmethod
    def parse_common_organization_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_project_path(project: str) -> str: ...
    @staticmethod
    def parse_common_project_path(path: str) -> dict[str, str]: ...
    @staticmethod
    def common_location_path(project: str, location: str) -> str: ...
    @staticmethod
    def parse_common_location_path(path: str) -> dict[str, str]: ...
    @classmethod
    def get_mtls_endpoint_and_cert_source(cls, client_options: client_options_lib.ClientOptions | None = None): ...
    @property
    def api_endpoint(self): ...
    @property
    def universe_domain(self) -> str: ...
    def __init__(self, *, credentials: ga_credentials.Credentials | None = None, transport: str | FirestoreAdminTransport | Callable[..., FirestoreAdminTransport] | None = None, client_options: client_options_lib.ClientOptions | dict | None = None, client_info: gapic_v1.client_info.ClientInfo = ...) -> None: ...
    def create_index(self, request: firestore_admin.CreateIndexRequest | dict | None = None, *, parent: str | None = None, index: gfa_index.Index | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def list_indexes(self, request: firestore_admin.ListIndexesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListIndexesPager: ...
    def get_index(self, request: firestore_admin.GetIndexRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> index.Index: ...
    def delete_index(self, request: firestore_admin.DeleteIndexRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def get_field(self, request: firestore_admin.GetFieldRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> field.Field: ...
    def update_field(self, request: firestore_admin.UpdateFieldRequest | dict | None = None, *, field: gfa_field.Field | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def list_fields(self, request: firestore_admin.ListFieldsRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListFieldsPager: ...
    def export_documents(self, request: firestore_admin.ExportDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def import_documents(self, request: firestore_admin.ImportDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def bulk_delete_documents(self, request: firestore_admin.BulkDeleteDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def create_database(self, request: firestore_admin.CreateDatabaseRequest | dict | None = None, *, parent: str | None = None, database: gfa_database.Database | None = None, database_id: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def get_database(self, request: firestore_admin.GetDatabaseRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> database.Database: ...
    def list_databases(self, request: firestore_admin.ListDatabasesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListDatabasesResponse: ...
    def update_database(self, request: firestore_admin.UpdateDatabaseRequest | dict | None = None, *, database: gfa_database.Database | None = None, update_mask: field_mask_pb2.FieldMask | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def delete_database(self, request: firestore_admin.DeleteDatabaseRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def get_backup(self, request: firestore_admin.GetBackupRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> backup.Backup: ...
    def list_backups(self, request: firestore_admin.ListBackupsRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupsResponse: ...
    def delete_backup(self, request: firestore_admin.DeleteBackupRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def restore_database(self, request: firestore_admin.RestoreDatabaseRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> gac_operation.Operation: ...
    def create_backup_schedule(self, request: firestore_admin.CreateBackupScheduleRequest | dict | None = None, *, parent: str | None = None, backup_schedule: schedule.BackupSchedule | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    def get_backup_schedule(self, request: firestore_admin.GetBackupScheduleRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    def list_backup_schedules(self, request: firestore_admin.ListBackupSchedulesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupSchedulesResponse: ...
    def update_backup_schedule(self, request: firestore_admin.UpdateBackupScheduleRequest | dict | None = None, *, backup_schedule: schedule.BackupSchedule | None = None, update_mask: field_mask_pb2.FieldMask | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    def delete_backup_schedule(self, request: firestore_admin.DeleteBackupScheduleRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def __enter__(self) -> FirestoreAdminClient: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def list_operations(self, request: operations_pb2.ListOperationsRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.ListOperationsResponse: ...
    def get_operation(self, request: operations_pb2.GetOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    def delete_operation(self, request: operations_pb2.DeleteOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    def cancel_operation(self, request: operations_pb2.CancelOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
