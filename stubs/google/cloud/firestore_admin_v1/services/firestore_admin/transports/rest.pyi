import dataclasses
from .base import FirestoreAdminTransport
from google.api_core import gapic_v1, operations_v1
from google.auth import credentials as ga_credentials
from google.cloud.firestore_admin_v1.types import backup, database, field, firestore_admin, index, schedule
from google.longrunning import operations_pb2
from google.protobuf import empty_pb2
from typing import Callable, Sequence

__all__ = ['FirestoreAdminRestTransport']

class FirestoreAdminRestInterceptor:
    def pre_bulk_delete_documents(self, request: firestore_admin.BulkDeleteDocumentsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.BulkDeleteDocumentsRequest, Sequence[tuple[str, str]]]: ...
    def post_bulk_delete_documents(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_create_backup_schedule(self, request: firestore_admin.CreateBackupScheduleRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.CreateBackupScheduleRequest, Sequence[tuple[str, str]]]: ...
    def post_create_backup_schedule(self, response: schedule.BackupSchedule) -> schedule.BackupSchedule: ...
    def pre_create_database(self, request: firestore_admin.CreateDatabaseRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.CreateDatabaseRequest, Sequence[tuple[str, str]]]: ...
    def post_create_database(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_create_index(self, request: firestore_admin.CreateIndexRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.CreateIndexRequest, Sequence[tuple[str, str]]]: ...
    def post_create_index(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_delete_backup(self, request: firestore_admin.DeleteBackupRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.DeleteBackupRequest, Sequence[tuple[str, str]]]: ...
    def pre_delete_backup_schedule(self, request: firestore_admin.DeleteBackupScheduleRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.DeleteBackupScheduleRequest, Sequence[tuple[str, str]]]: ...
    def pre_delete_database(self, request: firestore_admin.DeleteDatabaseRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.DeleteDatabaseRequest, Sequence[tuple[str, str]]]: ...
    def post_delete_database(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_delete_index(self, request: firestore_admin.DeleteIndexRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.DeleteIndexRequest, Sequence[tuple[str, str]]]: ...
    def pre_export_documents(self, request: firestore_admin.ExportDocumentsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ExportDocumentsRequest, Sequence[tuple[str, str]]]: ...
    def post_export_documents(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_get_backup(self, request: firestore_admin.GetBackupRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.GetBackupRequest, Sequence[tuple[str, str]]]: ...
    def post_get_backup(self, response: backup.Backup) -> backup.Backup: ...
    def pre_get_backup_schedule(self, request: firestore_admin.GetBackupScheduleRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.GetBackupScheduleRequest, Sequence[tuple[str, str]]]: ...
    def post_get_backup_schedule(self, response: schedule.BackupSchedule) -> schedule.BackupSchedule: ...
    def pre_get_database(self, request: firestore_admin.GetDatabaseRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.GetDatabaseRequest, Sequence[tuple[str, str]]]: ...
    def post_get_database(self, response: database.Database) -> database.Database: ...
    def pre_get_field(self, request: firestore_admin.GetFieldRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.GetFieldRequest, Sequence[tuple[str, str]]]: ...
    def post_get_field(self, response: field.Field) -> field.Field: ...
    def pre_get_index(self, request: firestore_admin.GetIndexRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.GetIndexRequest, Sequence[tuple[str, str]]]: ...
    def post_get_index(self, response: index.Index) -> index.Index: ...
    def pre_import_documents(self, request: firestore_admin.ImportDocumentsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ImportDocumentsRequest, Sequence[tuple[str, str]]]: ...
    def post_import_documents(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_list_backups(self, request: firestore_admin.ListBackupsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ListBackupsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_backups(self, response: firestore_admin.ListBackupsResponse) -> firestore_admin.ListBackupsResponse: ...
    def pre_list_backup_schedules(self, request: firestore_admin.ListBackupSchedulesRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ListBackupSchedulesRequest, Sequence[tuple[str, str]]]: ...
    def post_list_backup_schedules(self, response: firestore_admin.ListBackupSchedulesResponse) -> firestore_admin.ListBackupSchedulesResponse: ...
    def pre_list_databases(self, request: firestore_admin.ListDatabasesRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ListDatabasesRequest, Sequence[tuple[str, str]]]: ...
    def post_list_databases(self, response: firestore_admin.ListDatabasesResponse) -> firestore_admin.ListDatabasesResponse: ...
    def pre_list_fields(self, request: firestore_admin.ListFieldsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ListFieldsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_fields(self, response: firestore_admin.ListFieldsResponse) -> firestore_admin.ListFieldsResponse: ...
    def pre_list_indexes(self, request: firestore_admin.ListIndexesRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.ListIndexesRequest, Sequence[tuple[str, str]]]: ...
    def post_list_indexes(self, response: firestore_admin.ListIndexesResponse) -> firestore_admin.ListIndexesResponse: ...
    def pre_restore_database(self, request: firestore_admin.RestoreDatabaseRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.RestoreDatabaseRequest, Sequence[tuple[str, str]]]: ...
    def post_restore_database(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_update_backup_schedule(self, request: firestore_admin.UpdateBackupScheduleRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.UpdateBackupScheduleRequest, Sequence[tuple[str, str]]]: ...
    def post_update_backup_schedule(self, response: schedule.BackupSchedule) -> schedule.BackupSchedule: ...
    def pre_update_database(self, request: firestore_admin.UpdateDatabaseRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.UpdateDatabaseRequest, Sequence[tuple[str, str]]]: ...
    def post_update_database(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_update_field(self, request: firestore_admin.UpdateFieldRequest, metadata: Sequence[tuple[str, str]]) -> tuple[firestore_admin.UpdateFieldRequest, Sequence[tuple[str, str]]]: ...
    def post_update_field(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_cancel_operation(self, request: operations_pb2.CancelOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.CancelOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_cancel_operation(self, response: None) -> None: ...
    def pre_delete_operation(self, request: operations_pb2.DeleteOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.DeleteOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_delete_operation(self, response: None) -> None: ...
    def pre_get_operation(self, request: operations_pb2.GetOperationRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.GetOperationRequest, Sequence[tuple[str, str]]]: ...
    def post_get_operation(self, response: operations_pb2.Operation) -> operations_pb2.Operation: ...
    def pre_list_operations(self, request: operations_pb2.ListOperationsRequest, metadata: Sequence[tuple[str, str]]) -> tuple[operations_pb2.ListOperationsRequest, Sequence[tuple[str, str]]]: ...
    def post_list_operations(self, response: operations_pb2.ListOperationsResponse) -> operations_pb2.ListOperationsResponse: ...

@dataclasses.dataclass
class FirestoreAdminRestStub:
    def __init__(self, _session, _host, _interceptor) -> None: ...

class FirestoreAdminRestTransport(FirestoreAdminTransport):
    def __init__(self, *, host: str = 'firestore.googleapis.com', credentials: ga_credentials.Credentials | None = None, credentials_file: str | None = None, scopes: Sequence[str] | None = None, client_cert_source_for_mtls: Callable[[], tuple[bytes, bytes]] | None = None, quota_project_id: str | None = None, client_info: gapic_v1.client_info.ClientInfo = ..., always_use_jwt_access: bool | None = False, url_scheme: str = 'https', interceptor: FirestoreAdminRestInterceptor | None = None, api_audience: str | None = None) -> None: ...
    @property
    def operations_client(self) -> operations_v1.AbstractOperationsClient: ...
    class _BulkDeleteDocuments(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.BulkDeleteDocumentsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _CreateBackupSchedule(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.CreateBackupScheduleRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    class _CreateDatabase(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.CreateDatabaseRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _CreateIndex(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.CreateIndexRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _DeleteBackup(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.DeleteBackupRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()): ...
    class _DeleteBackupSchedule(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.DeleteBackupScheduleRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()): ...
    class _DeleteDatabase(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.DeleteDatabaseRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _DeleteIndex(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.DeleteIndexRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()): ...
    class _ExportDocuments(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ExportDocumentsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _GetBackup(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.GetBackupRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> backup.Backup: ...
    class _GetBackupSchedule(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.GetBackupScheduleRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    class _GetDatabase(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.GetDatabaseRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> database.Database: ...
    class _GetField(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.GetFieldRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> field.Field: ...
    class _GetIndex(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.GetIndexRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> index.Index: ...
    class _ImportDocuments(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ImportDocumentsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _ListBackups(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ListBackupsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupsResponse: ...
    class _ListBackupSchedules(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ListBackupSchedulesRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupSchedulesResponse: ...
    class _ListDatabases(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ListDatabasesRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListDatabasesResponse: ...
    class _ListFields(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ListFieldsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListFieldsResponse: ...
    class _ListIndexes(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.ListIndexesRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListIndexesResponse: ...
    class _RestoreDatabase(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.RestoreDatabaseRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _UpdateBackupSchedule(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.UpdateBackupScheduleRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    class _UpdateDatabase(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.UpdateDatabaseRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    class _UpdateField(FirestoreAdminRestStub):
        def __hash__(self): ...
        def __call__(self, request: firestore_admin.UpdateFieldRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    @property
    def bulk_delete_documents(self) -> Callable[[firestore_admin.BulkDeleteDocumentsRequest], operations_pb2.Operation]: ...
    @property
    def create_backup_schedule(self) -> Callable[[firestore_admin.CreateBackupScheduleRequest], schedule.BackupSchedule]: ...
    @property
    def create_database(self) -> Callable[[firestore_admin.CreateDatabaseRequest], operations_pb2.Operation]: ...
    @property
    def create_index(self) -> Callable[[firestore_admin.CreateIndexRequest], operations_pb2.Operation]: ...
    @property
    def delete_backup(self) -> Callable[[firestore_admin.DeleteBackupRequest], empty_pb2.Empty]: ...
    @property
    def delete_backup_schedule(self) -> Callable[[firestore_admin.DeleteBackupScheduleRequest], empty_pb2.Empty]: ...
    @property
    def delete_database(self) -> Callable[[firestore_admin.DeleteDatabaseRequest], operations_pb2.Operation]: ...
    @property
    def delete_index(self) -> Callable[[firestore_admin.DeleteIndexRequest], empty_pb2.Empty]: ...
    @property
    def export_documents(self) -> Callable[[firestore_admin.ExportDocumentsRequest], operations_pb2.Operation]: ...
    @property
    def get_backup(self) -> Callable[[firestore_admin.GetBackupRequest], backup.Backup]: ...
    @property
    def get_backup_schedule(self) -> Callable[[firestore_admin.GetBackupScheduleRequest], schedule.BackupSchedule]: ...
    @property
    def get_database(self) -> Callable[[firestore_admin.GetDatabaseRequest], database.Database]: ...
    @property
    def get_field(self) -> Callable[[firestore_admin.GetFieldRequest], field.Field]: ...
    @property
    def get_index(self) -> Callable[[firestore_admin.GetIndexRequest], index.Index]: ...
    @property
    def import_documents(self) -> Callable[[firestore_admin.ImportDocumentsRequest], operations_pb2.Operation]: ...
    @property
    def list_backups(self) -> Callable[[firestore_admin.ListBackupsRequest], firestore_admin.ListBackupsResponse]: ...
    @property
    def list_backup_schedules(self) -> Callable[[firestore_admin.ListBackupSchedulesRequest], firestore_admin.ListBackupSchedulesResponse]: ...
    @property
    def list_databases(self) -> Callable[[firestore_admin.ListDatabasesRequest], firestore_admin.ListDatabasesResponse]: ...
    @property
    def list_fields(self) -> Callable[[firestore_admin.ListFieldsRequest], firestore_admin.ListFieldsResponse]: ...
    @property
    def list_indexes(self) -> Callable[[firestore_admin.ListIndexesRequest], firestore_admin.ListIndexesResponse]: ...
    @property
    def restore_database(self) -> Callable[[firestore_admin.RestoreDatabaseRequest], operations_pb2.Operation]: ...
    @property
    def update_backup_schedule(self) -> Callable[[firestore_admin.UpdateBackupScheduleRequest], schedule.BackupSchedule]: ...
    @property
    def update_database(self) -> Callable[[firestore_admin.UpdateDatabaseRequest], operations_pb2.Operation]: ...
    @property
    def update_field(self) -> Callable[[firestore_admin.UpdateFieldRequest], operations_pb2.Operation]: ...
    @property
    def cancel_operation(self): ...
    class _CancelOperation(FirestoreAdminRestStub):
        def __call__(self, request: operations_pb2.CancelOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    @property
    def delete_operation(self): ...
    class _DeleteOperation(FirestoreAdminRestStub):
        def __call__(self, request: operations_pb2.DeleteOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    @property
    def get_operation(self): ...
    class _GetOperation(FirestoreAdminRestStub):
        def __call__(self, request: operations_pb2.GetOperationRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    @property
    def list_operations(self): ...
    class _ListOperations(FirestoreAdminRestStub):
        def __call__(self, request: operations_pb2.ListOperationsRequest, *, retry: OptionalRetry = ..., timeout: float | None = None, metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.ListOperationsResponse: ...
    @property
    def kind(self) -> str: ...
    def close(self) -> None: ...
