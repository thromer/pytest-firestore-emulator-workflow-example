from .transports.base import FirestoreAdminTransport
from _typeshed import Incomplete
from google.api_core import gapic_v1, operation_async
from google.api_core.client_options import ClientOptions
from google.auth import credentials as ga_credentials
from google.cloud.firestore_admin_v1.services.firestore_admin import pagers
from google.cloud.firestore_admin_v1.types import backup, database, database as gfa_database, field, field as gfa_field, firestore_admin, index, index as gfa_index, schedule
from google.longrunning import operations_pb2
from google.protobuf import field_mask_pb2
from typing import Callable, Sequence

__all__ = ['FirestoreAdminAsyncClient']

class FirestoreAdminAsyncClient:
    DEFAULT_ENDPOINT: Incomplete
    DEFAULT_MTLS_ENDPOINT: Incomplete
    backup_path: Incomplete
    parse_backup_path: Incomplete
    backup_schedule_path: Incomplete
    parse_backup_schedule_path: Incomplete
    collection_group_path: Incomplete
    parse_collection_group_path: Incomplete
    database_path: Incomplete
    parse_database_path: Incomplete
    field_path: Incomplete
    parse_field_path: Incomplete
    index_path: Incomplete
    parse_index_path: Incomplete
    location_path: Incomplete
    parse_location_path: Incomplete
    operation_path: Incomplete
    parse_operation_path: Incomplete
    common_billing_account_path: Incomplete
    parse_common_billing_account_path: Incomplete
    common_folder_path: Incomplete
    parse_common_folder_path: Incomplete
    common_organization_path: Incomplete
    parse_common_organization_path: Incomplete
    common_project_path: Incomplete
    parse_common_project_path: Incomplete
    common_location_path: Incomplete
    parse_common_location_path: Incomplete
    @classmethod
    def from_service_account_info(cls, info: dict, *args, **kwargs): ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args, **kwargs): ...
    from_service_account_json = from_service_account_file
    @classmethod
    def get_mtls_endpoint_and_cert_source(cls, client_options: ClientOptions | None = None): ...
    @property
    def transport(self) -> FirestoreAdminTransport: ...
    @property
    def api_endpoint(self): ...
    @property
    def universe_domain(self) -> str: ...
    get_transport_class: Incomplete
    def __init__(self, *, credentials: ga_credentials.Credentials | None = None, transport: str | FirestoreAdminTransport | Callable[..., FirestoreAdminTransport] | None = 'grpc_asyncio', client_options: ClientOptions | None = None, client_info: gapic_v1.client_info.ClientInfo = ...) -> None: ...
    async def create_index(self, request: firestore_admin.CreateIndexRequest | dict | None = None, *, parent: str | None = None, index: gfa_index.Index | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def list_indexes(self, request: firestore_admin.ListIndexesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListIndexesAsyncPager: ...
    async def get_index(self, request: firestore_admin.GetIndexRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> index.Index: ...
    async def delete_index(self, request: firestore_admin.DeleteIndexRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    async def get_field(self, request: firestore_admin.GetFieldRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> field.Field: ...
    async def update_field(self, request: firestore_admin.UpdateFieldRequest | dict | None = None, *, field: gfa_field.Field | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def list_fields(self, request: firestore_admin.ListFieldsRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> pagers.ListFieldsAsyncPager: ...
    async def export_documents(self, request: firestore_admin.ExportDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def import_documents(self, request: firestore_admin.ImportDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def bulk_delete_documents(self, request: firestore_admin.BulkDeleteDocumentsRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def create_database(self, request: firestore_admin.CreateDatabaseRequest | dict | None = None, *, parent: str | None = None, database: gfa_database.Database | None = None, database_id: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def get_database(self, request: firestore_admin.GetDatabaseRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> database.Database: ...
    async def list_databases(self, request: firestore_admin.ListDatabasesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListDatabasesResponse: ...
    async def update_database(self, request: firestore_admin.UpdateDatabaseRequest | dict | None = None, *, database: gfa_database.Database | None = None, update_mask: field_mask_pb2.FieldMask | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def delete_database(self, request: firestore_admin.DeleteDatabaseRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def get_backup(self, request: firestore_admin.GetBackupRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> backup.Backup: ...
    async def list_backups(self, request: firestore_admin.ListBackupsRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupsResponse: ...
    async def delete_backup(self, request: firestore_admin.DeleteBackupRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    async def restore_database(self, request: firestore_admin.RestoreDatabaseRequest | dict | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operation_async.AsyncOperation: ...
    async def create_backup_schedule(self, request: firestore_admin.CreateBackupScheduleRequest | dict | None = None, *, parent: str | None = None, backup_schedule: schedule.BackupSchedule | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    async def get_backup_schedule(self, request: firestore_admin.GetBackupScheduleRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    async def list_backup_schedules(self, request: firestore_admin.ListBackupSchedulesRequest | dict | None = None, *, parent: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> firestore_admin.ListBackupSchedulesResponse: ...
    async def update_backup_schedule(self, request: firestore_admin.UpdateBackupScheduleRequest | dict | None = None, *, backup_schedule: schedule.BackupSchedule | None = None, update_mask: field_mask_pb2.FieldMask | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> schedule.BackupSchedule: ...
    async def delete_backup_schedule(self, request: firestore_admin.DeleteBackupScheduleRequest | dict | None = None, *, name: str | None = None, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    async def list_operations(self, request: operations_pb2.ListOperationsRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.ListOperationsResponse: ...
    async def get_operation(self, request: operations_pb2.GetOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> operations_pb2.Operation: ...
    async def delete_operation(self, request: operations_pb2.DeleteOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    async def cancel_operation(self, request: operations_pb2.CancelOperationRequest | None = None, *, retry: OptionalRetry = ..., timeout: float | object = ..., metadata: Sequence[tuple[str, str]] = ()) -> None: ...
    async def __aenter__(self) -> FirestoreAdminAsyncClient: ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
